package org.cytoscape.gfdnet.view.resultPanel;

import java.util.Arrays;
import java.util.Comparator;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import org.cytoscape.gfdnet.controller.ResultPanelController;

/**
 * @license Apache License V2 <http://www.apache.org/licenses/LICENSE-2.0.html>
 * @author Juan José Díaz Montaña
 */
public class SummaryPanel extends javax.swing.JPanel {
    private final ResultPanelController resultPanelController;
    private Object[][] geneRows;
    private Object[][] relationshipRows;

    /**
     * Creates new form DefaultResultsPanel
     */
    public SummaryPanel(ResultPanelController resultPanelController) {
        this.resultPanelController = resultPanelController;
        initComponents();
    }
    
     private DefaultTableModel getGenesModel () {
        geneRows = resultPanelController.getGeneRows();

        Arrays.sort(geneRows, new Comparator() {
            @Override
            public int compare(Object o1, Object o2) {
                String p1 = ((String) ((Object[])o1)[2]);
                String p2 = (String) ((Object[])o2)[2];
                return p1.compareTo(p2);
            }
        });

        return new javax.swing.table.DefaultTableModel(
                geneRows,
                new String[] { "Gene", "GO Term", "GO Term Description" }
            ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
    }  
    
    private DefaultTableModel getRelationshipsModel () {
        relationshipRows = resultPanelController.getEdgesRows();
        
        Arrays.sort(relationshipRows, new Comparator() {
            @Override
            public int compare(Object o1, Object o2) {
                double p1 = ((Double) ((Object[])o1)[2]);
                double p2 = (Double) ((Object[])o2)[2];
                if (p1 < p2) { return -1; }
                else if (p1 > p2) { return 1; }
                else { return 0; }
            }
        });

        return new javax.swing.table.DefaultTableModel(
                relationshipRows,
                new String[] { "Gene 1", "Gene 2", "Dissimilarity" }
            ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        genesPanel = new javax.swing.JScrollPane();
        genesTable = new javax.swing.JTable();
        relationshipsPanel = new javax.swing.JScrollPane();
        relationshipsTable = new javax.swing.JTable();

        genesTable.setAutoCreateRowSorter(true);
        genesTable.setModel(getGenesModel());
        genesTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        genesTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                genesTableMouseClicked(evt);
            }
        });
        genesPanel.setViewportView(genesTable);

        jTabbedPane1.addTab("Genes", genesPanel);

        relationshipsTable.setAutoCreateRowSorter(true);
        relationshipsTable.setModel(getRelationshipsModel());
        relationshipsTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        relationshipsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                relationshipsTableMouseClicked(evt);
            }
        });
        relationshipsPanel.setViewportView(relationshipsTable);

        jTabbedPane1.addTab("Relationships", relationshipsPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void relationshipsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_relationshipsTableMouseClicked
        JTable target = (JTable)evt.getSource();
        int sel = target.getSelectedRow();
        if (evt.getClickCount() == 1) {
            resultPanelController.selectEdge((String) relationshipRows[sel][0], (String) relationshipRows[sel][1]);
        }
        else if (evt.getClickCount() == 2) {
            resultPanelController.showEdgeInfo((String) relationshipRows[sel][0], (String) relationshipRows[sel][1]);
        }
    }//GEN-LAST:event_relationshipsTableMouseClicked

    private void genesTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_genesTableMouseClicked
        JTable target = (JTable)evt.getSource();
        int sel = target.getSelectedRow();
        if (evt.getClickCount() == 1) {
            resultPanelController.selectNode((String) geneRows[sel][0]);
        }
        else if (evt.getClickCount() == 2) {
            String type = (String)geneRows[sel][0];
            if (!"Unknown".equals(type) && !"Unnanotated".equals(type)) {
                resultPanelController.showNodeInfo((String) geneRows[sel][0]);
            }
        }
    }//GEN-LAST:event_genesTableMouseClicked
            
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane genesPanel;
    private javax.swing.JTable genesTable;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JScrollPane relationshipsPanel;
    private javax.swing.JTable relationshipsTable;
    // End of variables declaration//GEN-END:variables
}
