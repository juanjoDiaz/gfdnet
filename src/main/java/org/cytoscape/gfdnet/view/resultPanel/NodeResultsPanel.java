package org.cytoscape.gfdnet.view.resultPanel;

import java.awt.Color;
import java.awt.Component;
import java.awt.Desktop;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JList;
import org.cytoscape.gfdnet.model.businessobjects.Enums.Ontology;
import org.cytoscape.gfdnet.model.businessobjects.GeneInput;
import org.cytoscape.gfdnet.model.businessobjects.go.GOTerm;

/**
 * @license Apache License V2 <http://www.apache.org/licenses/LICENSE-2.0.html>
 * @author Juan José Díaz Montaña
 */
public class NodeResultsPanel extends javax.swing.JPanel {

    public NodeResultsPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        GeneLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        GoTermList = new javax.swing.JList();

        GeneLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        GeneLabel.setText("Gene");

        GoTermList.setCellRenderer(new MyListCellRenderer());
        GoTermList.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        GoTermList.setDragEnabled(true);
        GoTermList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                GoTermListMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(GoTermList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(GeneLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(GeneLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void GoTermListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GoTermListMouseClicked
        if (evt.getClickCount()%2 == 0) {
            if (Desktop.isDesktopSupported()) {
                Desktop desktop = Desktop.getDesktop();
                String SelectedValue = GoTermList.getSelectedValue().toString();
                String URL = "http://amigo.geneontology.org/amigo/term/" + SelectedValue.substring(0, SelectedValue.indexOf(" "));
                try {
                    URI uri = new URI(URL);
                    desktop.browse(uri);
                } catch (IOException ex) {
                    
                } catch (URISyntaxException ex) {
                    
                }
            }
        }
    }//GEN-LAST:event_GoTermListMouseClicked

    public void showGeneDetails(GeneInput gene, Ontology ontology) {
        GeneLabel.setText(gene.getName());
        
        GOTerm selectedGOTerm = gene.getSelectedGOTerm();
        List<GOTerm> goTerms = new ArrayList<GOTerm>(gene.getGoTerms(ontology));
        final String[] goTermsDisplayList = new String[goTerms.size()];
        goTerms.remove(selectedGOTerm);
        goTermsDisplayList[0] = selectedGOTerm.getName() + " " + selectedGOTerm.getDescription();
        int i = 1;
        for (GOTerm goTerm : goTerms) {
            goTermsDisplayList[i] = goTerm.getName() + " " + goTerm.getDescription();
            i++;
        }
        GoTermList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = goTermsDisplayList;
            @Override
            public int getSize() { return strings.length; }
            @Override
            public Object getElementAt(int i) { return strings[i]; }
        });
    }
    
    class MyListCellRenderer extends DefaultListCellRenderer {
        @Override
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus)
        {
            Component c = super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
            if (index == 0 && list.getSelectedIndex() != 0) {
                c.setBackground(Color.lightGray);
            }
            return c;
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel GeneLabel;
    private javax.swing.JList GoTermList;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
