package org.cytoscape.gfdnet.view.configurationDialogs;

import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.SwingUtilities;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.cytoscape.gfdnet.controller.tasks.ExecuteGFDnetTask;
import org.cytoscape.gfdnet.controller.utils.CySwing;
import org.cytoscape.gfdnet.model.businessobjects.Enums.Ontology;
import org.cytoscape.gfdnet.model.businessobjects.exceptions.DatabaseException;
import org.cytoscape.gfdnet.model.businessobjects.go.Organism;
import org.cytoscape.gfdnet.model.dataaccess.Database;
import org.cytoscape.work.TaskIterator;
import org.cytoscape.work.TaskManager;

/**
 * @license Apache License V2 <http://www.apache.org/licenses/LICENSE-2.0.html>
 * @author Juan José Díaz Montaña
 */
public class ConfigurationDialog extends javax.swing.JDialog {
    private TaskManager taskManager;
    private final String[] commonOrganisms = { "Arabidopsis thaliana", "Caenorhabditis elegans",
                "Danio rerio", "Dictyostelium discoideum", "Drosophila melanogaster",
                "Escherichia coli", "Gallus gallus", "Homo sapiens", "Mus musculus",
                "Rattus norvegicus", "Saccharomyces cerevisiae", "Schizosaccharomyces pombe" };
    private String[] genus;
    private String[] curSpecies;
    private final Map<String, String[]> species = new HashMap<String, String[]>();;

    private Ontology ontology;
    private Organism organism;
    private String url;
    private String user;
    private String password;
    
    private final String onlineUrl = "mysql.ebi.ac.uk:4085/go_latest";
    private final String onlineUser = "go_select";
    private final String onlinePassword = "amigo";
    
    /**
     * Creates new form NewJDialog
     */
    public ConfigurationDialog(TaskManager taskManager) {
        super(CySwing.getDesktopJFrame(), true);
        initComponents();
        setLocationRelativeTo(CySwing.getDesktopJFrame());
        this.taskManager = taskManager;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        databasePanel = new javax.swing.JLayeredPane();
        onlineDatabasePanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        useCustomDatabaseButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        customDatabasePanel = new javax.swing.JPanel();
        URLButton = new javax.swing.JLabel();
        URLTextField = new javax.swing.JTextField();
        UserLabel = new javax.swing.JLabel();
        UserTextField = new javax.swing.JTextField();
        PasswordLabel = new javax.swing.JLabel();
        PasswordTextBox = new javax.swing.JPasswordField();
        useOnlineDatabaseButton = new javax.swing.JButton();
        ontologyPanel = new javax.swing.JPanel();
        ontologyComboBox = new javax.swing.JComboBox();
        organismPanel = new javax.swing.JLayeredPane();
        commonOrganismsPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        OrganismList = new javax.swing.JList();
        seeAllOrganismsButton = new javax.swing.JButton();
        loadingOrganismsPanel = new javax.swing.JPanel();
        pic = new javax.swing.JLabel();
        allOrganismsPanel = new javax.swing.JPanel();
        genusSearchBox = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        genusList = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        speciesSearchBox = new javax.swing.JTextField();
        seeCommonOrganismsButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        speciesList = new javax.swing.JList();
        seeCommonOrganismButton = new javax.swing.JButton();
        runGFDNetButton = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 344, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 112, Short.MAX_VALUE)
        );

        setTitle("GFD-Net");
        setResizable(false);

        databasePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("GO Database"));
        databasePanel.setLayout(new java.awt.CardLayout());

        jLabel3.setText("By default GFD-Net uses the latest Gene Ontology");

        jLabel4.setText("version hosted by  EBI.");

        useCustomDatabaseButton.setText("Use custom database");
        useCustomDatabaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useCustomDatabaseButtonActionPerformed(evt);
            }
        });

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/OnlineCon.png"))); // NOI18N

        javax.swing.GroupLayout onlineDatabasePanelLayout = new javax.swing.GroupLayout(onlineDatabasePanel);
        onlineDatabasePanel.setLayout(onlineDatabasePanelLayout);
        onlineDatabasePanelLayout.setHorizontalGroup(
            onlineDatabasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, onlineDatabasePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(useCustomDatabaseButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(onlineDatabasePanelLayout.createSequentialGroup()
                .addGroup(onlineDatabasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(onlineDatabasePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(onlineDatabasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3)))
                    .addGroup(onlineDatabasePanelLayout.createSequentialGroup()
                        .addGap(144, 144, 144)
                        .addComponent(jLabel5)))
                .addContainerGap(11, Short.MAX_VALUE))
        );
        onlineDatabasePanelLayout.setVerticalGroup(
            onlineDatabasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(onlineDatabasePanelLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addComponent(useCustomDatabaseButton)
                .addContainerGap())
        );

        databasePanel.add(onlineDatabasePanel, "onlineDatabasePanel");

        URLButton.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        URLButton.setText("URL:");

        URLTextField.setText(url);
        URLTextField.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        UserLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        UserLabel.setText("User:");

        UserTextField.setText(user);

        PasswordLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        PasswordLabel.setText("Password:");

        PasswordTextBox.setText(password);

        useOnlineDatabaseButton.setText("Use online database");
        useOnlineDatabaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useOnlineDatabaseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout customDatabasePanelLayout = new javax.swing.GroupLayout(customDatabasePanel);
        customDatabasePanel.setLayout(customDatabasePanelLayout);
        customDatabasePanelLayout.setHorizontalGroup(
            customDatabasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customDatabasePanelLayout.createSequentialGroup()
                .addGroup(customDatabasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(customDatabasePanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(PasswordLabel))
                    .addComponent(UserLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(customDatabasePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(URLButton, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(customDatabasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(UserTextField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(URLTextField)
                    .addComponent(PasswordTextBox))
                .addContainerGap())
            .addGroup(customDatabasePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(useOnlineDatabaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        customDatabasePanelLayout.setVerticalGroup(
            customDatabasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customDatabasePanelLayout.createSequentialGroup()
                .addGroup(customDatabasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(URLButton)
                    .addComponent(URLTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(customDatabasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(UserLabel)
                    .addComponent(UserTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(customDatabasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PasswordLabel)
                    .addComponent(PasswordTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(useOnlineDatabaseButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        databasePanel.add(customDatabasePanel, "customDatabasePanel");

        ontologyPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Ontology"));

        ontologyComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { Ontology.BP.getDescription(), Ontology.CC.getDescription(), Ontology.MF.getDescription() }));

        javax.swing.GroupLayout ontologyPanelLayout = new javax.swing.GroupLayout(ontologyPanel);
        ontologyPanel.setLayout(ontologyPanelLayout);
        ontologyPanelLayout.setHorizontalGroup(
            ontologyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ontologyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ontologyComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        ontologyPanelLayout.setVerticalGroup(
            ontologyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ontologyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ontologyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        organismPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Organism"));
        organismPanel.setLayout(new java.awt.CardLayout());

        OrganismList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = commonOrganisms;
            public int getSize() { return commonOrganisms.length; }
            public Object getElementAt(int i) { return commonOrganisms[i]; }
        });
        jScrollPane1.setViewportView(OrganismList);

        seeAllOrganismsButton.setText("See more organisms");
        seeAllOrganismsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seeAllOrganismsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout commonOrganismsPanelLayout = new javax.swing.GroupLayout(commonOrganismsPanel);
        commonOrganismsPanel.setLayout(commonOrganismsPanelLayout);
        commonOrganismsPanelLayout.setHorizontalGroup(
            commonOrganismsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(commonOrganismsPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(seeAllOrganismsButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, commonOrganismsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1))
        );
        commonOrganismsPanelLayout.setVerticalGroup(
            commonOrganismsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(commonOrganismsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(seeAllOrganismsButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        organismPanel.add(commonOrganismsPanel, "commonOrganismsPanel");

        pic.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        pic.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/loadingOrg.png"))); // NOI18N
        pic.setText("<html><b>Loading organisms....</b><br/>\n<font size=\"3\" color=\"grey\">(This procces may take few seconds)</font>");

        javax.swing.GroupLayout loadingOrganismsPanelLayout = new javax.swing.GroupLayout(loadingOrganismsPanel);
        loadingOrganismsPanel.setLayout(loadingOrganismsPanelLayout);
        loadingOrganismsPanelLayout.setHorizontalGroup(
            loadingOrganismsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pic, javax.swing.GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE)
        );
        loadingOrganismsPanelLayout.setVerticalGroup(
            loadingOrganismsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pic, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
        );

        organismPanel.add(loadingOrganismsPanel, "loadingOrganismsPanel");

        allOrganismsPanel.setPreferredSize(new java.awt.Dimension(344, 287));

        genusSearchBox.getDocument().addDocumentListener(new DocumentListener(){
            @Override public void insertUpdate(DocumentEvent e) { filter(); }
            @Override public void removeUpdate(DocumentEvent e) { filter(); }
            @Override public void changedUpdate(DocumentEvent e) {}
            private void filter() {
                String filter = genusSearchBox.getText().toLowerCase();
                final String[] filteredGenus;
                if (filter.isEmpty()) {
                    filteredGenus = genus;
                } else {
                    List<String> filteredGenusList = new ArrayList<String>();
                    for (String genera : genus) {
                        if (genera.toLowerCase().startsWith(filter)) {
                            filteredGenusList.add(genera);
                        }
                    }
                    filteredGenus = filteredGenusList.toArray(new String[filteredGenusList.size()]);
                }
                genusList.setModel(new javax.swing.AbstractListModel() {
                    String[] strings = filteredGenus;
                    @Override
                    public int getSize() { return strings.length; }
                    @Override
                    public Object getElementAt(int i) { return strings[i]; }
                });
            }
        });

        genusList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                genusListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(genusList);

        jLabel1.setText("Genus:");

        jLabel2.setText("Specie:");

        speciesSearchBox.getDocument().addDocumentListener(new DocumentListener(){
            @Override public void insertUpdate(DocumentEvent e) { filter(); }
            @Override public void removeUpdate(DocumentEvent e) { filter(); }
            @Override public void changedUpdate(DocumentEvent e) {}
            private void filter() {
                String filter = speciesSearchBox.getText().toLowerCase();
                final String[] filteredSpecies;
                if (filter.isEmpty()) {
                    filteredSpecies = curSpecies;
                } else {
                    List<String> filteredSpeciesList = new ArrayList<String>();
                    for (String species : curSpecies) {
                        if (species.toLowerCase().startsWith(filter)) {
                            filteredSpeciesList.add(species);
                        }
                    }
                    filteredSpecies = filteredSpeciesList.toArray(new String[filteredSpeciesList.size()]);
                }
                speciesList.setModel(new javax.swing.AbstractListModel() {
                    String[] strings = filteredSpecies;
                    @Override
                    public int getSize() { return strings.length; }
                    @Override
                    public Object getElementAt(int i) { return strings[i]; }
                });
            }
        });

        seeCommonOrganismsButton.setText("See only  common organisms");

        jScrollPane3.setViewportView(speciesList);

        seeCommonOrganismButton.setText("See common organisms");
        seeCommonOrganismButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seeCommonOrganismButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout allOrganismsPanelLayout = new javax.swing.GroupLayout(allOrganismsPanel);
        allOrganismsPanel.setLayout(allOrganismsPanelLayout);
        allOrganismsPanelLayout.setHorizontalGroup(
            allOrganismsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, allOrganismsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(allOrganismsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(allOrganismsPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57)
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(allOrganismsPanelLayout.createSequentialGroup()
                        .addGroup(allOrganismsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                            .addComponent(genusSearchBox))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(allOrganismsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(speciesSearchBox))))
                .addGap(6, 6, 6))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, allOrganismsPanelLayout.createSequentialGroup()
                .addGap(0, 43, Short.MAX_VALUE)
                .addComponent(seeCommonOrganismsButton)
                .addGap(60, 60, 60))
            .addGroup(allOrganismsPanelLayout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addComponent(seeCommonOrganismButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        allOrganismsPanelLayout.setVerticalGroup(
            allOrganismsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(allOrganismsPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(allOrganismsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(allOrganismsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(genusSearchBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(speciesSearchBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(allOrganismsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                    .addComponent(jScrollPane3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(seeCommonOrganismButton)
                .addGap(260, 260, 260)
                .addComponent(seeCommonOrganismsButton)
                .addGap(31, 31, 31))
        );

        organismPanel.add(allOrganismsPanel, "allOrganismsPanel");

        runGFDNetButton.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        runGFDNetButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/exec.gif"))); // NOI18N
        runGFDNetButton.setText("Run GFD-Net");
        runGFDNetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runGFDNetButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ontologyPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(organismPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(databasePanel)
                    .addComponent(runGFDNetButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(databasePanel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ontologyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(organismPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(runGFDNetButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void genusListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_genusListValueChanged
        final String curGenus = genusList.getSelectedValue().toString();
        curSpecies = species.get(curGenus);
        if (curSpecies == null) {
            List<String> speciesAux;
            try {
                speciesAux = Organism.getSpeciesFromGenus(curGenus);
            } catch (DatabaseException ex) {
                CySwing.displayPopUpMessage("There was a problem accesing the database.");
                return;
            }
            curSpecies = speciesAux.toArray(new String[speciesAux.size()]);
            species.put(curGenus, curSpecies);
        }

        speciesList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = curSpecies;
            @Override
            public int getSize() { return strings.length; }
            @Override
            public Object getElementAt(int i) { return strings[i]; }
        });
    }//GEN-LAST:event_genusListValueChanged

    private void runGFDNetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runGFDNetButtonActionPerformed
        try {
            setDatabase();
            setOrganism();
            setOntology();
        }
        catch (IllegalArgumentException e) {
            CySwing.displayPopUpMessage(e.getMessage());
            return;
        }
        this.setVisible(false);
        taskManager.execute(new TaskIterator(new ExecuteGFDnetTask(organism, ontology)));
    }//GEN-LAST:event_runGFDNetButtonActionPerformed

    private void seeAllOrganismsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seeAllOrganismsButtonActionPerformed
        setDatabase();
        if (genusList.getModel().getSize() > 0) {
            ((CardLayout)organismPanel.getLayout()).show(organismPanel, "allOrganismsPanel");
            return;
        }
        ((CardLayout)organismPanel.getLayout()).show(organismPanel, "loadingOrganismsPanel");
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {  
                List<String> genusAux;
                try {
                    genusAux = Organism.getAllGenera();
                } catch (DatabaseException  e) {
                    ((CardLayout)organismPanel.getLayout()).show(organismPanel, "commonOrganismsPanel");
                    CySwing.displayPopUpMessage(e.getMessage());
                    return;
                }
                genus = genusAux.toArray(new String[genusAux.size()]);

                genusList.setModel(new javax.swing.AbstractListModel() {
                    String[] strings = genus;
                    @Override
                    public int getSize() { return strings.length; }
                    @Override
                    public Object getElementAt(int i) { return strings[i]; }
                });
                ((CardLayout)organismPanel.getLayout()).show(organismPanel, "allOrganismsPanel");
            }
        });
    }//GEN-LAST:event_seeAllOrganismsButtonActionPerformed

    private void seeCommonOrganismButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seeCommonOrganismButtonActionPerformed
        ((CardLayout)organismPanel.getLayout()).show(organismPanel, "commonOrganismsPanel");
    }//GEN-LAST:event_seeCommonOrganismButtonActionPerformed

    private void useCustomDatabaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useCustomDatabaseButtonActionPerformed
        ((CardLayout)databasePanel.getLayout()).show(databasePanel, "customDatabasePanel");
    }//GEN-LAST:event_useCustomDatabaseButtonActionPerformed

    private void useOnlineDatabaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useOnlineDatabaseButtonActionPerformed
        URLTextField.setText(onlineUrl);
        UserTextField.setText(onlineUser);
        PasswordTextBox.setText(onlinePassword);
    }//GEN-LAST:event_useOnlineDatabaseButtonActionPerformed

    private void setDatabase() {
        if (onlineDatabasePanel.isVisible()) {
            Database.setConnection(onlineUrl, onlineUser, onlinePassword);
        } else {
            url = URLTextField.getText();
            user = UserTextField.getText();
            password = String.valueOf(PasswordTextBox.getPassword());

            Database.setConnection(url, user, password);
        }
    }
    
    private void setOrganism() {
        String selectedGenus;
        String selectedSpecies;
        if (commonOrganismsPanel.isVisible()) {
            Object organismNameObj = OrganismList.getSelectedValue();
            if (organismNameObj == null) {
                throw new IllegalArgumentException("An organism must be selected");
            }
            String organismName = OrganismList.getSelectedValue().toString();
            int aux = organismName.indexOf(" ");
            selectedGenus = organismName.substring(0,aux);
            selectedSpecies = organismName.substring(aux+1, organismName.length());
        } else {
            Object selectedGenusObj = genusList.getSelectedValue();
            Object selectedSpeciesObj = speciesList.getSelectedValue();
            if (selectedGenusObj == null || selectedSpeciesObj == null) {
                throw new IllegalArgumentException("A genus and a specie must be selected.");
            }
            selectedGenus = selectedGenusObj.toString();
            selectedSpecies = selectedSpeciesObj.toString();
        }
        
        if(organism == null || (!organism.getGenus().equals(selectedGenus) || !organism.getSpecies().equals(selectedSpecies))) {
           organism = new Organism(selectedGenus, selectedSpecies);
        }
    }
    
    private void setOntology() {
        try{
            ontology = Ontology.getEnum(ontologyComboBox.getSelectedItem().toString());
        }
        catch (IllegalArgumentException e) {
            throw new IllegalArgumentException("Invalid ontology.");
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList OrganismList;
    private javax.swing.JLabel PasswordLabel;
    private javax.swing.JPasswordField PasswordTextBox;
    private javax.swing.JLabel URLButton;
    private javax.swing.JTextField URLTextField;
    private javax.swing.JLabel UserLabel;
    private javax.swing.JTextField UserTextField;
    private javax.swing.JPanel allOrganismsPanel;
    private javax.swing.JPanel commonOrganismsPanel;
    private javax.swing.JPanel customDatabasePanel;
    private javax.swing.JLayeredPane databasePanel;
    private javax.swing.JList genusList;
    private javax.swing.JTextField genusSearchBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel loadingOrganismsPanel;
    private javax.swing.JPanel onlineDatabasePanel;
    private javax.swing.JComboBox ontologyComboBox;
    private javax.swing.JPanel ontologyPanel;
    private javax.swing.JLayeredPane organismPanel;
    private static javax.swing.JLabel pic;
    private javax.swing.JButton runGFDNetButton;
    private javax.swing.JButton seeAllOrganismsButton;
    private javax.swing.JButton seeCommonOrganismButton;
    private javax.swing.JButton seeCommonOrganismsButton;
    private javax.swing.JList speciesList;
    private javax.swing.JTextField speciesSearchBox;
    private javax.swing.JButton useCustomDatabaseButton;
    private javax.swing.JButton useOnlineDatabaseButton;
    // End of variables declaration//GEN-END:variables
}
